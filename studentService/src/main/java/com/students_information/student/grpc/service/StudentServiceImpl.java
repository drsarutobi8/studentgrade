package com.students_information.student.grpc.service;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

import javax.inject.Inject;

import com.students_information.common.tenant.InvalidTenantException;
import com.students_information.common.value.StudentPK;
import com.students_information.result.stubs.ResultReadRequest;
import com.students_information.result.stubs.ResultReadResponse;
import com.students_information.result.stubs.ResultServiceGrpc;
import com.students_information.student.domain.Student;
import com.students_information.student.service.StudentService;
import com.students_information.student.stubs.Gender;
import com.students_information.student.stubs.Grade;
import com.students_information.student.stubs.StudentInfoRequest;
import com.students_information.student.stubs.StudentInfoResponse;
import com.students_information.student.stubs.StudentServiceGrpc;

import io.grpc.Status;
import io.grpc.stub.StreamObserver;
import io.quarkus.grpc.GrpcClient;
import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;
import lombok.extern.slf4j.Slf4j;

//@GrpcService
@Blocking
//@RolesAllowed({"student","teacher"})
@Slf4j
public class StudentServiceImpl extends StudentServiceGrpc.StudentServiceImplBase {

    @Inject
    StudentService studentService;

    // We have to override the getStudentInfo that was defined in the StudentService class
    // The StudentService class is an autogenerated class by the proto file
    // So, let's override the getStudentInfo method here.
    @Override
    public void getInfo(StudentInfoRequest request, StreamObserver<StudentInfoResponse> responseObserver) {
        String schoolId = request.getSchoolId();
        String studentId = request.getStudentId();// the student ID should be passed with the request message
        StudentPK studentPK = new StudentPK(schoolId, studentId);

        try{
            Uni<Student> studentUni = studentService.read(studentPK); // Let's find the student information from the student table
            Student student = studentUni.await().indefinitely();
            /*
                The getResults method will help us to fetch the results for the student from the result service.
                this method will call the result service through its client and bring back the result as a list of strings
             */
            List<String> resultResponse = getResults(studentPK);

            // Once all the results are clear, we can build our response message
            StudentInfoResponse studentInfoResponse = StudentInfoResponse.newBuilder()
                    .setSchoolId(schoolId)
                    .setStudentId(studentId)
                    .setName(student.getName())
                    .setAge(student.getAge())
                    .setGender(Gender.valueOf(student.getGender()))
                    .setMaths(Grade.valueOf(resultResponse.get(0)))
                    .setArt(Grade.valueOf(resultResponse.get(1)))
                    .setChemistry(Grade.valueOf(resultResponse.get(2)))
                    .build();

            /*
                gRPC works in an asynchronous manner, so if you have ever worked with asynchronous programming
                you would know what will happen with following two methods.
                with the onNext method we send the response, once the response is sent we use onCompleted()
            */
            responseObserver.onNext(studentInfoResponse);
            responseObserver.onCompleted();
        }//try
        catch (NoSuchElementException e){
            log.error("NO STUDENT FOUND WITH THE STUDENT ID :- "+studentId);
            // If some error occurs we sent an error with the following status which is not_found
            responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
        }//catch
        catch (InvalidTenantException e) {
            log.error("INVALID SCHOOL ID :- "+ e.getInvalidTenantId());
            // If some error occurs we sent an error with the following status which is not_found
            responseObserver.onError(Status.INVALID_ARGUMENT.asRuntimeException());
        }//catch
    }

    @GrpcClient("result")
    ResultServiceGrpc.ResultServiceBlockingStub resultClient;

    public List<String> getResults(StudentPK studentPK){
        // Creating the request object
        ResultReadRequest resultRequest = ResultReadRequest.newBuilder()
                                            .setSchoolId(studentPK.getSchoolId())
                                            .setStudentId(studentPK.getStudentId())
                                            .build();
        // Getting the response back
        ResultReadResponse resultResponse = resultClient.read(resultRequest);
        
        // Send it to the caller, in an appropriate manner in this case as a list.
        List<String> resultGrades = new ArrayList<>();
        resultGrades.add(resultResponse.getMaths().toString());
        resultGrades.add(resultResponse.getArt().toString());
        resultGrades.add(resultResponse.getChemistry().toString());
        
        return resultGrades;
    }
}
