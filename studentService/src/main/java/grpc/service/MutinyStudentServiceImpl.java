package grpc.service;

import java.util.List;
import java.util.NoSuchElementException;

import javax.inject.Inject;

import com.students_information.stubs.result.MutinyResultServiceGrpc;
import com.students_information.stubs.result.ResultReadRequest;
import com.students_information.stubs.result.ResultReadResponse;
import com.students_information.stubs.student.Grade;
import com.students_information.stubs.student.Gender;
import com.students_information.stubs.student.MutinyStudentServiceGrpc;
import com.students_information.stubs.student.StudentCreateRequest;
import com.students_information.stubs.student.StudentCreateResponse;
import com.students_information.stubs.student.StudentDeleteRequest;
import com.students_information.stubs.student.StudentDeleteResponse;
// import com.students_information.stubs.student.StudentInfoListAllRequest;
// import com.students_information.stubs.student.StudentInfoListResponse;
import com.students_information.stubs.student.StudentInfoRequest;
import com.students_information.stubs.student.StudentInfoResponse;
import com.students_information.stubs.student.StudentListAllRequest;
import com.students_information.stubs.student.StudentListResponse;
import com.students_information.stubs.student.StudentReadRequest;
import com.students_information.stubs.student.StudentReadResponse;
import com.students_information.stubs.student.StudentUpdateRequest;
import com.students_information.stubs.student.StudentUpdateResponse;

import domain.Student;
import io.quarkus.grpc.GrpcClient;
import io.quarkus.grpc.GrpcService;
import io.smallrye.mutiny.Uni;
import lombok.extern.slf4j.Slf4j;
import service.StudentService;
import tenant.InvalidTenantException;
import value.StudentInfo;
import value.StudentPK;

@GrpcService
@Slf4j
public class MutinyStudentServiceImpl extends MutinyStudentServiceGrpc.StudentServiceImplBase {

    @Inject
    StudentService studentService;

    @GrpcClient("result")
    MutinyResultServiceGrpc.MutinyResultServiceStub resultClient;

    // We have to override the getStudentInfo that was defined in the StudentService class
    // The StudentService class is an autogenerated class by the proto file
    // So, let's override the getStudentInfo method here.
    @Override
    public Uni<StudentInfoResponse> getInfo(StudentInfoRequest request) {
        String schoolId = request.getSchoolId();
        String studentId = request.getStudentId();// the student Id should be passed with the request message
        log.info("start grpcService.getInfo studentId=".concat(studentId));    
        StudentPK studentPK = new StudentPK(schoolId, studentId);
        try {
            Uni<Student> studentUni = studentService.read(studentPK);
            Uni<StudentInfo> studentInfoUni = studentUni
                                                .onItem()
                                                    .ifNull()
                                                        .failWith(new NoSuchElementException())
                                                .onItem()
                                                    .ifNotNull()
                                                        .transformToUni(student -> prepareStudentInfoUni(student));
                                                            Uni<StudentInfoResponse> response = studentInfoUni
                                                                        .onItem()
                                                                            .transformToUni(info -> Uni.createFrom().item(
                                                                                StudentInfoResponse.newBuilder()
                                                                                .setSchoolId(info.getSchoolId())
                                                                                .setStudentId(info.getStudentId())
                                                                                .setName(info.getName())
                                                                                .setAge(info.getAge())
                                                                                .setGender((info.getGender()==null)?null:Gender.valueOf(info.getGender()))
                                                                                .setMaths((info.getMaths()==null)?Grade.UNKNOWN:Grade.valueOf(info.getMaths()))
                                                                                .setArt((info.getArt()==null)?Grade.UNKNOWN:Grade.valueOf(info.getArt()))
                                                                                .setChemistry((info.getChemistry()==null)?Grade.UNKNOWN:Grade.valueOf(info.getChemistry()))
                                                                                .build()
                                                                            )
                                                                        .onFailure()
                                                                            .recoverWithItem(StudentInfoResponse.newBuilder().build()));
            return response;
        }//try
        catch (InvalidTenantException e) {
            e.printStackTrace();
            return Uni.createFrom().item(StudentInfoResponse.newBuilder().build());
        }//catch
    }

    private Uni<StudentInfo> prepareStudentInfoUni(Student student) {
        return resultClient.read(prepareResultReadRequest(student.getStudentId()))
        .onItem()
            .transformToUni(resultRes -> prepareStudentInfoUni(student, resultRes))
        .onFailure()
            .recoverWithItem(StudentInfo.builder()
                .age(student.getAge())
                .gender(student.getGender())
                .name(student.getName())
                .schoolId(student.getSchoolId())
                .studentId(student.getStudentId())
                .art(Grade.UNKNOWN.name())
                .maths(Grade.UNKNOWN.name())
                .chemistry(Grade.UNKNOWN.name())
                .build());
    }

    private static ResultReadRequest prepareResultReadRequest(String studentId) {
        return ResultReadRequest.newBuilder().setStudentId(studentId).build();
    }

    private static Uni<StudentInfo> prepareStudentInfoUni(Student student, ResultReadResponse resultRes) {
        return Uni.createFrom().item(prepareStudentInfo(student, resultRes));
    }

    private static StudentInfo prepareStudentInfo(Student student, ResultReadResponse resultRes) {
        return StudentInfo.builder()
                .schoolId(student.getSchoolId())
                .studentId(student.getStudentId())
                .name(student.getName())
                .age(student.getAge())
                .gender(student.getGender())
                .maths(resultRes.getMaths().toString())
                .art(resultRes.getArt().toString())
                .chemistry(resultRes.getChemistry().toString())
                .build();
    }

    // @Override
    // public Uni<StudentInfoListResponse> listAllInfo(StudentInfoListAllRequest request) {
    //     log.info("start grpcService.listAllInfo");    

    //     Uni<List<Student>> studentsUni = studentService.listAll();
    //     //return prepareInfoListResponse(studentsUni);
    //     Uni<StudentInfoListResponse.Builder> builderUni = studentsUni
    //                                                         .onItem()
    //                                                             .transformToUni(students ->prepareInfoListResponseBuilder(students));

    //     return builderUni.onItem().transform(builder -> builder.build());
    // }

    // private Uni<StudentInfoListResponse> prepareInfoListResponse(Uni<List<Student>> studentsUni) {
    //     StudentInfoListResponse.Builder listInfoResponseBuilder = StudentInfoListResponse.newBuilder();
    //     return studentsUni
    //             .onItem()
    //                 .invoke(
    //                     students -> students.stream().
    //                                     forEach(student ->  prepareStudentInfoUni(student)
    //                                                         .subscribe()
    //                                                             .with(studentInfo -> 
    //                                                                 listInfoResponseBuilder.addStudentsInfo(
    //                                                                     StudentInfoResponse.newBuilder()
    //                                                                         .setAge(studentInfo.getAge())
    //                                                                         .setGender(Gender.valueOf(studentInfo.getGender()))
    //                                                                         .setName(studentInfo.getName())
    //                                                                         .setStudentId(studentInfo.getStudentId())
    //                                                                         .setArt(Grade.valueOf(studentInfo.getArt()))
    //                                                                         .setChemistry(Grade.valueOf(studentInfo.getChemistry()))
    //                                                                         .setMaths(Grade.valueOf(studentInfo.getMaths()))
    //                                                                         .build())
    //                                                             )
    //                                     )
    //                 )
    //             .onItem()
    //                 .transformToUni(students -> Uni.createFrom().item(listInfoResponseBuilder.build()));
    // }

    // private Uni<StudentInfoListResponse.Builder> prepareInfoListResponseBuilder(List<Student> students) {
    // StudentInfoListResponse.Builder builder = StudentInfoListResponse.newBuilder();
    // students.stream().
    //         forEach(student ->  prepareStudentInfoUni(student)
    //                             .subscribe()
    //                                 .with(studentInfo -> 
    //                                     builder.addStudentsInfo(
    //                                         StudentInfoResponse.newBuilder()
    //                                             .setAge(studentInfo.getAge())
    //                                             .setGender(Gender.valueOf(studentInfo.getGender()))
    //                                             .setName(studentInfo.getName())
    //                                             .setStudentId(studentInfo.getStudentId())
    //                                             .setArt(Grade.valueOf(studentInfo.getArt()))
    //                                             .setChemistry(Grade.valueOf(studentInfo.getChemistry()))
    //                                             .setMaths(Grade.valueOf(studentInfo.getMaths()))
    //                                             .build())
    //                 )
    //         );
    //     return Uni.createFrom().item(builder);
    // }

    @Override
    public Uni<StudentCreateResponse> create(StudentCreateRequest request) {
        String studentId = request.getStudentId();
        log.info("start grpcService.create studentId=".concat(studentId));
        Student newStudent = new Student();
        newStudent.setAge(request.getAge());
        newStudent.setGender(request.getGender().toString());
        newStudent.setName(request.getName());
        newStudent.setSchoolId(request.getSchoolId());
        newStudent.setStudentId(request.getStudentId());
        Uni<Student> studentUni;
        try {
            studentUni = studentService.create(newStudent);
            Uni<StudentCreateResponse> response = studentUni
                                                    .onItem()
                                                        .transformToUni(student -> Uni.createFrom().item(
                                                            StudentCreateResponse.newBuilder()
                                                            .setSchoolId(student.getSchoolId())
                                                            .setStudentId(student.getStudentId())
                                                            .build()
                                                        )
                                                    .onFailure()
                                                        .recoverWithItem(StudentCreateResponse.newBuilder().build()));
            return response;
        }//try
        catch (InvalidTenantException e) {
            e.printStackTrace();
            return Uni.createFrom().item(StudentCreateResponse.newBuilder().build());
        }//catch
    }

    @Override
    public Uni<StudentReadResponse> read(StudentReadRequest request) {
        String schoolId = request.getSchoolId();
        String studentId = request.getStudentId();
        log.info("start grpcService.read studentId=".concat(studentId));
        StudentPK studentPK = new StudentPK(schoolId, studentId);
        Uni<Student> studentUni;
        try {
            studentUni = studentService.read(studentPK);
            Uni<StudentReadResponse> response = studentUni
            .onItem()
                .ifNotNull()
                    .transformToUni(student -> Uni.createFrom().item(
                        StudentReadResponse.newBuilder()
                        .setSchoolId(student.getSchoolId())
                        .setStudentId(student.getStudentId())
                        .setName(student.getName())
                        .setAge(student.getAge())
                        .setGender(Gender.valueOf(student.getGender()))
                        .build()
                    )
            .onItem()
                .ifNull()
                    .continueWith(StudentReadResponse.newBuilder().build())
            .onFailure()
                .recoverWithItem(StudentReadResponse.newBuilder().build()));
            return response;
        }//try
        catch (InvalidTenantException e) {
            e.printStackTrace();
            return Uni.createFrom().item(StudentReadResponse.newBuilder().build());
        }//catch
    }

    @Override
    public Uni<StudentUpdateResponse> update(StudentUpdateRequest request) {
        String schoolId = request.getSchoolId();
        String studentId = request.getStudentId();
        log.info("start grpcService.update studentId=".concat(studentId));
        Student updatingStudent = new Student();
        updatingStudent.setAge(request.getAge());
        updatingStudent.setGender(request.getGender().toString());
        updatingStudent.setName(request.getName());
        updatingStudent.setSchoolId(schoolId);
        updatingStudent.setStudentId(studentId);
        try {
            Uni<Student> studentUni = studentService.update(updatingStudent);
            Uni<StudentUpdateResponse> response = studentUni
            .onItem()
                .transformToUni(student -> Uni.createFrom().item(
                    StudentUpdateResponse.newBuilder()
                    .setSchoolId(student.getSchoolId())
                    .setStudentId(student.getStudentId())
                    .build()
                )
            .onFailure()
                .recoverWithItem(StudentUpdateResponse.newBuilder().build()));
            return response;
        }//try
        catch (InvalidTenantException e) {
            e.printStackTrace();
            return Uni.createFrom().item(StudentUpdateResponse.newBuilder().build());
        }//catch
    }

    @Override
    public Uni<StudentDeleteResponse> delete(StudentDeleteRequest request) {
        String schoolId = request.getSchoolId();
        String studentId = request.getStudentId();
        log.info("start grpcService.delete studentId=".concat(studentId));
        StudentPK studentPK = new StudentPK(schoolId, studentId);
        try {
            Uni<Long> deletedCountUni = studentService.delete(studentPK);
            Uni<StudentDeleteResponse> response = deletedCountUni
                                                    .onItem()
                                                        .transformToUni(deletedCount -> Uni.createFrom().item(
                                                            StudentDeleteResponse.newBuilder()
                                                            .setDeletedCount(deletedCount)
                                                            .build()
                                                        )
                                                    .onFailure()
                                                        .recoverWithItem(StudentDeleteResponse.newBuilder()
                                                                                                .setDeletedCount(0l)
                                                                                                .build()
                                                        ));
            return response;
        }//try
        catch (InvalidTenantException e) {
            e.printStackTrace();
            return Uni.createFrom().item(StudentDeleteResponse.newBuilder().build());
        }//catch
    }
 
    @Override
    public Uni<StudentListResponse> listAll(StudentListAllRequest request) {
        log.info("start grpcService.listAll");    

        Uni<List<Student>> studentsUni = studentService.listAll();
        Uni<StudentListResponse> listReponseUni = studentsUni
                                                        .onItem()
                                                            .transformToUni(students -> prepareListResponse(students));

        return listReponseUni;
    }

    private Uni<StudentListResponse> prepareListResponse(List<Student> students) {
        StudentListResponse.Builder listReponseBuilder = StudentListResponse.newBuilder();
        if (students!=null && !students.isEmpty()) {
            students.stream().
                forEach(student -> 
                    listReponseBuilder.addStudents(StudentReadResponse.newBuilder()
                        .setAge(student.getAge())
                        .setGender(Gender.valueOf(student.getGender()))
                        .setName(student.getName())
                        .setSchoolId(student.getSchoolId())
                        .setStudentId(student.getStudentId())
                        .build())
                );
        }//if
        return Uni.createFrom().item(listReponseBuilder.build());
    }
}