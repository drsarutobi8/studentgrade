/*
 * This file was generated by the Gradle 'init' task.
 */
import java.io.FileInputStream
import java.util.Properties

val envProp = Properties()
envProp.load(FileInputStream(file("${projectDir}/.env")))

plugins {
    java
    `maven-publish`
    id("io.quarkus")
    id("io.freefair.lombok") 
    id("org.kordamp.gradle.jandex")
    id("com.palantir.docker-compose")
//    id("com.palantir.docker-run")
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }

    maven {
        url = uri("https://maven.pkg.github.com/drsarutobi8/*")
    }
}

val quarkusPlatformGroupId: String by project
val quarkusPlatformArtifactId: String by project
val quarkusPlatformVersion: String by project

dependencies {
    implementation(project(":common"))
    implementation(project(":studentApi"))
    implementation(project(":resultApi"))
    implementation(project(":resultService"))

    compileOnly("org.projectlombok:lombok:1.18.20")

    implementation(enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}"))
    implementation("io.quarkus:quarkus-grpc")
    implementation("io.quarkus:quarkus-hibernate-reactive-panache")
    implementation("io.quarkus:quarkus-keycloak-authorization")
    implementation("io.quarkus:quarkus-oidc")
    implementation("io.quarkus:quarkus-reactive-mysql-client")
    implementation("io.quarkus:quarkus-resteasy")
    implementation("io.quarkus:quarkus-resteasy-mutiny")
    implementation("io.quarkus:quarkus-rest-client-reactive-jackson")
    implementation("io.quarkus:quarkus-security")
    implementation("io.rest-assured:rest-assured")
    
    testImplementation("io.quarkus:quarkus-junit5")
    testImplementation("org.awaitility:awaitility")
    testImplementation("org.assertj:assertj-core")
}

group = "org.acme"
version = "1.0.0-SNAPSHOT"
description = "grpc-plain-text-quickstart"
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}
