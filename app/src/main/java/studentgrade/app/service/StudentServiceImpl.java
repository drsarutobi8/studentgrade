package studentgrade.app.service;

import java.util.List;

import javax.inject.Inject;
import java.util.NoSuchElementException;

import io.quarkus.grpc.GrpcService;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;


import studentgrade.gprc.student.Gender;
import studentgrade.gprc.student.Grade;
import studentgrade.gprc.student.StudentRequest;
import studentgrade.gprc.student.StudentResponse;
import studentgrade.gprc.student.StudentServiceGrpc;
import studentgrade.gprc.student.MutinyStudentServiceGrpc;

import studentgrade.app.client.ResultClient;
import studentgrade.app.entity.Student;
import studentgrade.app.entity.StudentRepository;

import io.smallrye.mutiny.Uni;

import lombok.extern.slf4j.Slf4j;

@GrpcService
@Slf4j
public class StudentServiceImpl extends MutinyStudentServiceGrpc.StudentServiceImplBase {
    // We need to have an instance of the repository class to work with the database
    @Inject
    StudentRepository studentRepo;
 
    // We have to override the getStudentInfo that was defined in the StudentService class
    // The StudentService class is an autogenerated class by the proto file
    // So, let's override the getStudentInfo method here.
    @Override
    public Uni<StudentResponse> getStudentInfo(StudentRequest request) {
        String studentId = request.getStudentId();// the student ID should be passed with the request message

        try{
            Uni<Student> studentUni = studentRepo.findById(studentId); // Use the dao class to retrieve data
            Student student = studentUni.await().indefinitely(); // Let's find the student information from the student table

            /*
                The getResults method will help us to fetch the results for the student from the result service.
                this method will call the result service through its client and bring back the result as a list of strings
             */
            List<String> resultResponse = getResults(studentId);

            // Once all the results are clear, we can build our response message
            StudentResponse studentResponse = StudentResponse.newBuilder()
                    .setStudentId(studentId)
                    .setName(student.getName())
                    .setAge(student.getAge())
                    .setGender(Gender.valueOf(student.getGender()))
                    .setMaths(Grade.valueOf(resultResponse.get(0)))
                    .setArt(Grade.valueOf(resultResponse.get(1)))
                    .setChemistry(Grade.valueOf(resultResponse.get(2)))
                    .build();

            return Uni.createFrom().item(studentResponse);
            
        } catch (NoSuchElementException e) {
            log.error("NO RESULT FOUND WITH THE STUDENT ID :- " + studentId);
            throw e;
        }
    }

    public List<String> getResults(String studentId){

        // To connect with the ResultClient we need something called a channel
        // This is how you create a channel,
        ManagedChannel channel = ManagedChannelBuilder.forTarget("localhost:8080")
                .usePlaintext()
                .build();

        ResultClient resultClient = new ResultClient(channel);

        return resultClient.getResults(studentId);
    }
}
